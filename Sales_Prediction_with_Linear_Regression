{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4f1c6076",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-06-30T16:36:57.730408Z",
     "iopub.status.busy": "2024-06-30T16:36:57.729947Z",
     "iopub.status.idle": "2024-06-30T16:37:00.438643Z",
     "shell.execute_reply": "2024-06-30T16:37:00.437487Z"
    },
    "papermill": {
     "duration": 2.719395,
     "end_time": "2024-06-30T16:37:00.440975",
     "exception": false,
     "start_time": "2024-06-30T16:36:57.721580",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/advertising/advertising.csv\n"
     ]
    }
   ],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "\n",
    "# Settings\n",
    "pd.set_option(\"display.float_format\", lambda x: \"%.2f\" % x)\n",
    "\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9786823",
   "metadata": {
    "papermill": {
     "duration": 0.005903,
     "end_time": "2024-06-30T16:37:00.453559",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.447656",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Simple Linear Regression with OLS Using Scikit-Learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "673299dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:00.467591Z",
     "iopub.status.busy": "2024-06-30T16:37:00.467009Z",
     "iopub.status.idle": "2024-06-30T16:37:00.487084Z",
     "shell.execute_reply": "2024-06-30T16:37:00.485842Z"
    },
    "papermill": {
     "duration": 0.030345,
     "end_time": "2024-06-30T16:37:00.489989",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.459644",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/advertising/advertising.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6c3c89d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:00.505181Z",
     "iopub.status.busy": "2024-06-30T16:37:00.504610Z",
     "iopub.status.idle": "2024-06-30T16:37:00.529092Z",
     "shell.execute_reply": "2024-06-30T16:37:00.527896Z"
    },
    "papermill": {
     "duration": 0.035322,
     "end_time": "2024-06-30T16:37:00.531585",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.496263",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TV</th>\n",
       "      <th>radio</th>\n",
       "      <th>newspaper</th>\n",
       "      <th>sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>230.10</td>\n",
       "      <td>37.80</td>\n",
       "      <td>69.20</td>\n",
       "      <td>22.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>44.50</td>\n",
       "      <td>39.30</td>\n",
       "      <td>45.10</td>\n",
       "      <td>10.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17.20</td>\n",
       "      <td>45.90</td>\n",
       "      <td>69.30</td>\n",
       "      <td>9.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>151.50</td>\n",
       "      <td>41.30</td>\n",
       "      <td>58.50</td>\n",
       "      <td>18.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>180.80</td>\n",
       "      <td>10.80</td>\n",
       "      <td>58.40</td>\n",
       "      <td>12.90</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      TV  radio  newspaper  sales\n",
       "0 230.10  37.80      69.20  22.10\n",
       "1  44.50  39.30      45.10  10.40\n",
       "2  17.20  45.90      69.30   9.30\n",
       "3 151.50  41.30      58.50  18.50\n",
       "4 180.80  10.80      58.40  12.90"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "61493f1f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:00.546827Z",
     "iopub.status.busy": "2024-06-30T16:37:00.546360Z",
     "iopub.status.idle": "2024-06-30T16:37:00.557943Z",
     "shell.execute_reply": "2024-06-30T16:37:00.556876Z"
    },
    "papermill": {
     "duration": 0.021872,
     "end_time": "2024-06-30T16:37:00.560294",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.538422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df[[\"TV\"]]\n",
    "y = df[[\"sales\"]]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4470b44b",
   "metadata": {
    "papermill": {
     "duration": 0.005746,
     "end_time": "2024-06-30T16:37:00.572579",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.566833",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "30e881bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:00.587087Z",
     "iopub.status.busy": "2024-06-30T16:37:00.586703Z",
     "iopub.status.idle": "2024-06-30T16:37:00.607778Z",
     "shell.execute_reply": "2024-06-30T16:37:00.606575Z"
    },
    "papermill": {
     "duration": 0.031073,
     "end_time": "2024-06-30T16:37:00.610400",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.579327",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "reg_model = LinearRegression().fit(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1c7711b",
   "metadata": {
    "papermill": {
     "duration": 0.006265,
     "end_time": "2024-06-30T16:37:00.622989",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.616724",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "y_hat = b + w*x\n",
    "\n",
    "y_hat = b + w*TV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8200a14c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:00.637401Z",
     "iopub.status.busy": "2024-06-30T16:37:00.636972Z",
     "iopub.status.idle": "2024-06-30T16:37:00.644236Z",
     "shell.execute_reply": "2024-06-30T16:37:00.643178Z"
    },
    "papermill": {
     "duration": 0.017082,
     "end_time": "2024-06-30T16:37:00.646497",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.629415",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7.032593549127695"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sabit (b - bias)\n",
    "reg_model.intercept_[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a75a1e46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:00.661003Z",
     "iopub.status.busy": "2024-06-30T16:37:00.660091Z",
     "iopub.status.idle": "2024-06-30T16:37:00.667236Z",
     "shell.execute_reply": "2024-06-30T16:37:00.666088Z"
    },
    "papermill": {
     "duration": 0.016762,
     "end_time": "2024-06-30T16:37:00.669508",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.652746",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.04753664043301975"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TV katsayısı (w1)\n",
    "reg_model.coef_[0][0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5fef9d9",
   "metadata": {
    "papermill": {
     "duration": 0.006344,
     "end_time": "2024-06-30T16:37:00.682075",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.675731",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "150 birimlik TV harcaması olsa ne kadar satış olması beklenir?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "57842115",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:00.697924Z",
     "iopub.status.busy": "2024-06-30T16:37:00.697207Z",
     "iopub.status.idle": "2024-06-30T16:37:00.704461Z",
     "shell.execute_reply": "2024-06-30T16:37:00.703383Z"
    },
    "papermill": {
     "duration": 0.017707,
     "end_time": "2024-06-30T16:37:00.706933",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.689226",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14.163089614080658"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# x = 150\n",
    "# y_hat = b + w*x\n",
    "reg_model.intercept_[0] + reg_model.coef_[0][0]*150\n",
    "\n",
    "# Out: 14.163089614080658 sales for 150 spent in TV advertisement"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76f1f9c6",
   "metadata": {
    "papermill": {
     "duration": 0.006113,
     "end_time": "2024-06-30T16:37:00.719467",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.713354",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "500 birimlik TV harcaması olsa ne kadar satış olması beklenir?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "46a27168",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:00.734610Z",
     "iopub.status.busy": "2024-06-30T16:37:00.734230Z",
     "iopub.status.idle": "2024-06-30T16:37:00.741579Z",
     "shell.execute_reply": "2024-06-30T16:37:00.740394Z"
    },
    "papermill": {
     "duration": 0.01783,
     "end_time": "2024-06-30T16:37:00.743811",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.725981",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30.800913765637567"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# x = 500\n",
    "# y_hat = b + w*x\n",
    "reg_model.intercept_[0] + reg_model.coef_[0][0]*500\n",
    "\n",
    "# Out: 30.800913765637567 sales for 500 spent in TV advertisement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e2c8984e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:00.758509Z",
     "iopub.status.busy": "2024-06-30T16:37:00.758067Z",
     "iopub.status.idle": "2024-06-30T16:37:00.787069Z",
     "shell.execute_reply": "2024-06-30T16:37:00.785529Z"
    },
    "papermill": {
     "duration": 0.039237,
     "end_time": "2024-06-30T16:37:00.789529",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.750292",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>TV</th>\n",
       "      <td>200.00</td>\n",
       "      <td>147.04</td>\n",
       "      <td>85.85</td>\n",
       "      <td>0.70</td>\n",
       "      <td>74.38</td>\n",
       "      <td>149.75</td>\n",
       "      <td>218.82</td>\n",
       "      <td>296.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>radio</th>\n",
       "      <td>200.00</td>\n",
       "      <td>23.26</td>\n",
       "      <td>14.85</td>\n",
       "      <td>0.00</td>\n",
       "      <td>9.97</td>\n",
       "      <td>22.90</td>\n",
       "      <td>36.52</td>\n",
       "      <td>49.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>newspaper</th>\n",
       "      <td>200.00</td>\n",
       "      <td>30.55</td>\n",
       "      <td>21.78</td>\n",
       "      <td>0.30</td>\n",
       "      <td>12.75</td>\n",
       "      <td>25.75</td>\n",
       "      <td>45.10</td>\n",
       "      <td>114.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sales</th>\n",
       "      <td>200.00</td>\n",
       "      <td>14.02</td>\n",
       "      <td>5.22</td>\n",
       "      <td>1.60</td>\n",
       "      <td>10.38</td>\n",
       "      <td>12.90</td>\n",
       "      <td>17.40</td>\n",
       "      <td>27.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           count   mean   std  min   25%    50%    75%    max\n",
       "TV        200.00 147.04 85.85 0.70 74.38 149.75 218.82 296.40\n",
       "radio     200.00  23.26 14.85 0.00  9.97  22.90  36.52  49.60\n",
       "newspaper 200.00  30.55 21.78 0.30 12.75  25.75  45.10 114.00\n",
       "sales     200.00  14.02  5.22 1.60 10.38  12.90  17.40  27.00"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe().T"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1878518c",
   "metadata": {
    "papermill": {
     "duration": 0.006971,
     "end_time": "2024-06-30T16:37:00.803739",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.796768",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Visualisation of Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "65ff9dc6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:00.820057Z",
     "iopub.status.busy": "2024-06-30T16:37:00.818906Z",
     "iopub.status.idle": "2024-06-30T16:37:01.255980Z",
     "shell.execute_reply": "2024-06-30T16:37:01.254842Z"
    },
    "papermill": {
     "duration": 0.448042,
     "end_time": "2024-06-30T16:37:01.258477",
     "exception": false,
     "start_time": "2024-06-30T16:37:00.810435",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.regplot(x=X, y=y, scatter_kws={\"color\": \"b\", \"s\": 9},\n",
    "               ci=False, color=\"r\")\n",
    "g.set_title(f\"Model Dentlemi: Sales = {round(reg_model.intercept_[0], 2)} + TV*{round(reg_model.coef_[0][0], 2)}\")\n",
    "g.set_ylabel(\"Sales\")\n",
    "g.set_xlabel(\"TV ad spendature\")\n",
    "plt.xlim(-10, 310)\n",
    "plt.ylim(bottom=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afed3188",
   "metadata": {
    "papermill": {
     "duration": 0.007379,
     "end_time": "2024-06-30T16:37:01.273615",
     "exception": false,
     "start_time": "2024-06-30T16:37:01.266236",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Prediction Success"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e840339c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:01.290766Z",
     "iopub.status.busy": "2024-06-30T16:37:01.290354Z",
     "iopub.status.idle": "2024-06-30T16:37:01.300747Z",
     "shell.execute_reply": "2024-06-30T16:37:01.299548Z"
    },
    "papermill": {
     "duration": 0.022141,
     "end_time": "2024-06-30T16:37:01.303456",
     "exception": false,
     "start_time": "2024-06-30T16:37:01.281315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.512652915656757"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# MSE\n",
    "y_pred = reg_model.predict(X)\n",
    "mean_squared_error(y, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c45c64c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:01.320556Z",
     "iopub.status.busy": "2024-06-30T16:37:01.320159Z",
     "iopub.status.idle": "2024-06-30T16:37:01.328702Z",
     "shell.execute_reply": "2024-06-30T16:37:01.327516Z"
    },
    "papermill": {
     "duration": 0.019948,
     "end_time": "2024-06-30T16:37:01.331222",
     "exception": false,
     "start_time": "2024-06-30T16:37:01.311274",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sales   14.02\n",
       "dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "233907da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:01.349147Z",
     "iopub.status.busy": "2024-06-30T16:37:01.348731Z",
     "iopub.status.idle": "2024-06-30T16:37:01.357761Z",
     "shell.execute_reply": "2024-06-30T16:37:01.356572Z"
    },
    "papermill": {
     "duration": 0.021533,
     "end_time": "2024-06-30T16:37:01.360425",
     "exception": false,
     "start_time": "2024-06-30T16:37:01.338892",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sales   5.22\n",
       "dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "40985a4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:01.378721Z",
     "iopub.status.busy": "2024-06-30T16:37:01.378308Z",
     "iopub.status.idle": "2024-06-30T16:37:01.389053Z",
     "shell.execute_reply": "2024-06-30T16:37:01.387902Z"
    },
    "papermill": {
     "duration": 0.022878,
     "end_time": "2024-06-30T16:37:01.391379",
     "exception": false,
     "start_time": "2024-06-30T16:37:01.368501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.2423221486546887"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# rmse\n",
    "np.sqrt(mean_squared_error(y, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "457d46bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:01.409387Z",
     "iopub.status.busy": "2024-06-30T16:37:01.408709Z",
     "iopub.status.idle": "2024-06-30T16:37:01.417615Z",
     "shell.execute_reply": "2024-06-30T16:37:01.416540Z"
    },
    "papermill": {
     "duration": 0.020687,
     "end_time": "2024-06-30T16:37:01.420328",
     "exception": false,
     "start_time": "2024-06-30T16:37:01.399641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.549806038927486"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# MAE\n",
    "mean_absolute_error(y, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fc01466d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-30T16:37:01.439523Z",
     "iopub.status.busy": "2024-06-30T16:37:01.439073Z",
     "iopub.status.idle": "2024-06-30T16:37:01.449949Z",
     "shell.execute_reply": "2024-06-30T16:37:01.448763Z"
    },
    "papermill": {
     "duration": 0.023364,
     "end_time": "2024-06-30T16:37:01.452771",
     "exception": false,
     "start_time": "2024-06-30T16:37:01.429407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.611875050850071"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# R-SQUARE\n",
    "# Veri setindeki bağımsız değşikenlerin, bağımlı değişkeni açıklama yüzdesidir.\n",
    "# Değişken sayısı arttıkça R Kare de şişmeye meyillidir.\n",
    "reg_model.score(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fb0a1db",
   "metadata": {
    "papermill": {
     "duration": 0.007771,
     "end_time": "2024-06-30T16:37:01.470077",
     "exception": false,
     "start_time": "2024-06-30T16:37:01.462306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5309605,
     "sourceId": 8825252,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.58387,
   "end_time": "2024-06-30T16:37:02.201219",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-30T16:36:54.617349",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
